openapi: 3.1.0
info:
  title: Marketplace API
  description: API для маркетплейса с авторизацией и управлением постами
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
      required: [error]
    
    Token:
      type: object
      properties:
        token:
          type: string
      required: [token]
    
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        login:
          type: string
    
    RegisterRequest:
      type: object
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          minLength: 8
          maxLength: 50
      required: [login, password]
    
    SignInRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required: [login, password]
    
    ProductPost:
      type: object
      properties:
        subject:
          type: string
          maxLength: 100
        post_text:
          type: string
          maxLength: 2500
        price:
          type: number
          format: float
          minimum: 0
        image:
          type: string
          format: binary
    
    ResponsePost:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        subject:
          type: string
        post_text:
          type: string
        image_address:
          type: string
        price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        is_owner:
          type: boolean
    
    CreatePostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        subject:
          type: string
      required: [id, subject]

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: AccessToken

paths:
  /auth/signUp:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidPayload:
                  value:
                    error: "invalid payload"
                loginLength:
                  value:
                    error: "login must be 3-50 characters"
                passwordLength:
                  value:
                    error: "password must be 8-50 characters"
                userExists:
                  value:
                    error: "user already exists"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signIn:
    post:
      summary: Авторизация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Успешная авторизация
          headers:
            Set-Cookie:
              schema:
                type: string
              example: "AccessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Max-Age=3600; Path=/; Secure; HttpOnly; SameSite=Lax"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "invalid credentials"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /post/create:
    post:
      summary: Создать новый пост
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductPost'
      responses:
        '201':
          description: Пост успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostResponse'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidPayload:
                  value:
                    error: "invalid payload"
                fileSize:
                  value:
                    error: "content size should be less than 5mb"
                contentLength:
                  value:
                    error: "contents should be less than 2500 chars"
                imageType:
                  value:
                    error: "invalid photo type"
                price:
                  value:
                    error: "subject cannot be negative"
                subjectLength:
                  value:
                    error: "subject should be less than 100 chars"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                noToken:
                  value:
                    error: "no auth token"
                invalidToken:
                  value:
                    error: "invalid auth token"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts:
    get:
      summary: Получить список постов
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [created_at, price]
        - name: sort_dir
          in: query
          schema:
            type: string
            enum: [asc, desc]
        - name: min_price
          in: query
          schema:
            type: number
            format: float
            minimum: 0
        - name: max_price
          in: query
          schema:
            type: number
            format: float
            minimum: 0
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponsePost'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "invalid payload"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'